#!/usr/bin/env python3
import numpy

kB = 0.001987204118

def read_probability_file(path):
    ''' Reads the probability file generated by ba-probability. '''
    class Data:  pass
    data = Data()
    fid = open('p.txt', 'rb')
    fid.readline()   # tells BA file (skip).
    data.M, data.N = [int(s) for s in fid.readline().split()[-2:]]
    data.xlo, data.xhi = [float(s) for s in fid.readline().split()[-2:]]
    data.ylo, data.yhi = [float(s) for s in fid.readline().split()[-2:]]
    fid.readline()  # should be p 
    
    data.p = numpy.genfromtxt(fid, max_rows=data.N)
    fid.readline()  # should be dpdl
    data.dpdl = numpy.genfromtxt(fid, max_rows=data.N)
    fid.readline()  # should be dpdq
    data.dpdq = numpy.genfromtxt(fid, max_rows=data.N)
    fid.readline()  # should be dpdql
    data.dpdql = numpy.genfromtxt(fid, max_rows=data.N)
    return data


def compute_initial_energy(data, T=300.0):
    ''' Computes the initial guess for the bond-angle energy from a probability
    distribution file. '''
    U = -kB * T * numpy.log(data.p)
    dUdl = -kB * T * data.dpdl / data.p
    dUdq = -kB * T * data.dpdq / data.p
    dUdql = -kB * T * (data.dpdql / data.p - data.dpdl*data.dpdq / (data.p*data.p))
    print(U.max(), U.min())


if __name__ == '__main__':
    data = read_probability_file('p.txt')
    compute_initial_energy(data)

